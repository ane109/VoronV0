# Note that macros can employ the Jinja2 template language

#####################################################################
# Additional Electronics Cooling
#####################################################################

[temperature_fan bay_fan]
pin: expander:PA2
max_power: 1
shutdown_speed: 1
cycle_time: 0.010
#hardware_pwm: true
kick_start_time: 0.2
off_below: 0
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#enable_pin:
#   See the "fan" section for a description of the above parameters.
sensor_type: temperature_combined
sensor_list: temperature_sensor mcu_temp,temperature_sensor btt_pi
maximum_deviation: 999
combination_method: max
control: pid
min_temp: 10
max_temp: 75
#   See the "extruder" section for a description of the above parameters.
pid_Kp: 6
pid_Ki: 0.75
pid_Kd: 1.25
#pid_Kp: 10
#pid_Ki:1.5
#pid_Kd: 3
# Old Values:
#pid_Kp: 0.7
#pid_Ki:0.5
#pid_Kd: 0.1
#   The proportional (pid_Kp), integral (pid_Ki), and derivative
#   (pid_Kd) settings for the PID feedback control system. Klipper
#   evaluates the PID settings with the following general formula:
#     fan_pwm = max_power - (Kp*e + Ki*integral(e) - Kd*derivative(e)) / 255
#   Where "e" is "target_temperature - measured_temperature" and
#   "fan_pwm" is the requested fan rate with 0.0 being full off and
#   1.0 being full on. The pid_Kp, pid_Ki, and pid_Kd parameters must
#   be provided when the PID control algorithm is enabled.
pid_deriv_time: 2.0
#   A time value (in seconds) over which temperature measurements will
#   be smoothed when using the PID control algorithm. This may reduce
#   the impact of measurement noise. The default is 2 seconds.
target_temp: 50
#   A temperature (in Celsius) that will be the target temperature.
#   The default is 40 degrees.
max_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when the sensor temperature exceeds the set value.
#   The default is 1.0.
min_speed: 0.30
#   The minimum fan speed (expressed as a value from 0.0 to 1.0) that
#   the fan will be set to for PID temperature fans.
#   The default is 0.3.
#gcode_id:
#   If set, the temperature will be reported in M105 queries using the
#   given id. The default is to not report the temperature via M105.

#####################################################################
# Additional Cooling Macros
#####################################################################

[gcode_macro STEPPER_COOLING_ENABLE]
Description: Drops electronics cooling fans target temperature to a low value to assist in stepper cooling
gcode:
  SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=bay_fan TARGET=40

[gcode_macro STEPPER_COOLING_DISABLE]
Description: Sets electronics cooling fans back to default
gcode:
  SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=bay_fan TARGET={printer.configfile.settings['temperature_fan bay_fan'].target_temp|float}

# Old macro used to independently control filter fan
#[fan_generic filter_fan]
#pin: gpio20
#max_power: 1
#shutdown_speed: 0.0
#cycle_time: 0.010
#hardware_pwm:
#kick_start_time: 0.2
#off_below: 0.2
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#enable_pin:
#   See the "fan" section for a description of the above parameters.

#[gcode_macro FILTER_FAN_ON]
#description: Turn ON carbon filter fan
#gcode:
#    SET_FAN_SPEED FAN=filter_fan SPEED=1.0

#[gcode_macro FILTER_FAN_OFF]
#description: Turn OFF carbon filter fan
#gcode:
#    SET_FAN_SPEED FAN=filter_fan SPEED=0

#####################################################################
# Additional Movement Macros
#####################################################################

# Slightly modified macro from Ellis' Tuning Guide
[gcode_macro _TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}
    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-10} Y{printer.toolhead.axis_maximum.y-10} F{30*60}
        G4 P1000 
        GET_POSITION
    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO=0.5
    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}
    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        # G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Not using a CoreXZ printer, only home X Y
        G28 X Y
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-10} Y{printer.toolhead.axis_maximum.y-10} F{30*60}
        G4 P1000 
        GET_POSITION
    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro MOVE_DEMO]
description: Runs _TEST_SPEED ACCEL=10000 SPEED=400 ITERATIONS=2
gcode:
  _TEST_SPEED ACCEL=10000 SPEED=400 ITERATIONS=2

[gcode_macro XY_HOMING_TEST]
gcode:
  M400 # Finish Moves
  G28  # First home, all axes
  #G28 Y
  #G28 X
  #G28 Z
  M400 # Finish Moves
  GET_POSITION # Emit position to console
  G4 P1000 #Short Pause
  G28 X Y # Second home
  #G28 Y
  #G28 X
  M400
  GET_POSITION
  G4 P1000
  G1 X60 F6000 # Move near center
  G1 Y60 F6000
  M400
  G4 P1000
  G28 X Y # Third Home
  #G28 Y
  #G28 X
  M400
  GET_POSITION
  G4 P1000
  G28 X Y # Final Home
  #G28 Y
  #G28 X
  M400
  GET_POSITION
  G90 # Return to absolute positioning

#####################################################################
# Misc Macros
#####################################################################

# Macro from Ellis' Tuning Guide
[gcode_macro DUMP_VARIABLES]
description: Dumps all current Klipper variables into the g-code console
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

# A better z-calibrate....the one on klipperscreen doesn't always work
[gcode_macro Z_CALIBRATE]
gcode:
    G28                      ; Home all axes
    G90                      ; Set to absolute positioning
    G1 X60.00 Y57.5 F6000    ; Movie to center of bed
    G1 Z1 F1500              ; Raise bed close to nozzle
    M400                     ; Wait for all moves to finish, just in case
    Z_ENDSTOP_CALIBRATE      ; Perform calibraton

[gcode_macro FORCE_LOWER_Z]
description: Forces the bed to lower by 5mm
gcode:
  FORCE_MOVE STEPPER=stepper_z DISTANCE=5 VELOCITY=5 ACCEL=100

#####################################################################
# Default Macro Overwrites
#####################################################################

# Slightly modified from Ellis' tuning guide
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    _WAIT_INDICATOR
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=sfs_switch_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        # Commented out the following 2 commands, moves can be done manually via klipperscreen or console if needed.
        # G90                                                                                  ; absolute positioning
        # G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        _PAUSE_INDICATOR
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

# Slightly modified from Ellis' tuning guide
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    _WAIT_INDICATOR
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=sfs_switch_sensor ENABLE=1                        ; enable filament sensor
        STEPPER_COOLING_ENABLE                                                       ; ensure stepper cooling is enabled 
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
            G4 P3000                                                                 ; give user 3 seconds to grab ooze from nozzle
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        _RUNNING_INDICATOR
        BASE_RESUME                                                                  ; resume print
    {% endif %}

# Slightly modified from Ellis' tuning guide
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    _WAIT_INDICATOR
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    SDCARD_RESET_FILE
    CLEAR_PAUSE
    PRINT_END
    BASE_CANCEL_PRINT

#####################################################################
# LED Macros
#####################################################################

[gcode_macro _IDLE_INDICATOR]
Description: Turns bed LED white
gcode:
    SET_LED LED="bed_rgb" RED=0.0 GREEN=0.0 BLUE=0.0 WHITE=0.04 SYNC=1 TRANSMIT=1

[gcode_macro _RUNNING_INDICATOR]
Description: Turns bed LED green
gcode:
    SET_LED LED="bed_rgb" RED=0.0 GREEN=0.1 BLUE=0.0 WHITE=0.0 SYNC=1 TRANSMIT=1

[gcode_macro _WAIT_INDICATOR]
Description: Turns bed LED red
gcode:
    SET_LED LED="bed_rgb" RED=0.1 GREEN=0.0 BLUE=0.0 WHITE=0.0 SYNC=1 TRANSMIT=1

[gcode_macro _PAUSE_INDICATOR]
Description: Turns bed LED yellow
gcode:
    SET_LED LED="bed_rgb" RED=0.2 GREEN=0.12 BLUE=0.0 WHITE=0.0 SYNC=1 TRANSMIT=1

[gcode_macro _PRETTY_INDICATOR]
Description: Turns bed LED purple, not used anywhere yet
gcode:
    SET_LED LED="bed_rgb" RED=0.02 GREEN=0.0 BLUE=0.05 WHITE=0.0 SYNC=1 TRANSMIT=1

#####################################################################
# Build Sheet Macros
#####################################################################
# Code from https://github.com/garethky/klipper-voron2.4-config/blob/mainline/printer_data/config/macros.cfg

## Every Build Plate you want to use needs an Install Macro
[gcode_macro INSTALL_TRIANGLELABS_TEXTURED_SHEET]
gcode:
    INSTALL_BUILD_SHEET NAME="TriangleLabs Textured"

[gcode_macro INSTALL_TRIANGLELABS_SMOOTH_SHEET]
gcode:
    INSTALL_BUILD_SHEET NAME="TriangleLabs Smooth"

[gcode_macro INSTALL_KBDDD_TEXTURED_SHEET]
gcode:
    INSTALL_BUILD_SHEET NAME="KBDDD Textured"

[gcode_macro INSTALL_SHIONKWOO_PATTERNED_SHEET]
gcode:
    INSTALL_BUILD_SHEET NAME="ShionKwoo Patterned"

#####################################################################
# Delays
#####################################################################

[gcode_macro DELAY_20]
Description: Twenty minute dwell split into one minute increments
gcode:
  # First 5 min block
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  # Second 5 min block
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
    # Third 5 min block
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
    # Fourth 5 min block
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400

[gcode_macro DELAY_07]
Description: Seven minute dwell split into one minute increments
gcode:
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  G4 P60000 ; let bed heatsoak for 1 minute
  M400
  